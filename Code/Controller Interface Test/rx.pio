.program rx

start:
    wait 0 pin 0        ;Wait for the falling edge
    nop [6]             ;Delay until halfway through the bit
    
bitloop:
    jmp pin one_bit     ;If the pin is high halfway through, then the bit is a one
                        ;If it's not, fall through to the zero case

zero_bit:
    in pins, 1 [6]      ;Shift in the 0 to the ISR, wait for the second half of the bit to complete
    jmp bitloop [7]     ;Jump back to the bit loop, but wait for halfway through the bit

one_bit:
    in pins, 1 [6]      ;Shift in the 1 to the ISR, wait for the second half of the bit to complete
    jmp pin signal      ;If the pin is high at the start of the next bit, the message has ended
    jmp bitloop [6]     ;If the pin is low, then a new bit has started and we need to wait for halfway through the bit

signal:
    push                ;Push the ISR value
    jmp start           ;Jump back to the start and wait for the next bit


% c-sdk {
#include "hardware/clocks.h"

static inline void rx_program_init(PIO pio, uint sm, uint offset, uint pin, uint freq)
{
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);

    pio_sm_config c = rx_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_jmp_pin(&c, pin);
    sm_config_set_in_shift(&c, false, false, 0);

    float div = (float)clock_get_hz(clk_sys) / (16 * freq);
    sm_config_set_clkdiv(&c, div);
    
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint rx_program_get(PIO pio, uint sm)
{
    while(pio_sm_is_rx_fifo_empty(pio, sm))
        tight_loop_contents();
    
    return pio->rxf[sm];
}

%}