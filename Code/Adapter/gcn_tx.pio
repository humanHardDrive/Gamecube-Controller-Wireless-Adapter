.program gcn_tx
.side_set 1 opt

.define public T1 2
.define public T2 6

nop side 1
.wrap_target
bitloop:
    out x, 1                       ; Out doesn't side set because it needs to retain the previous state. All branches need to set the output idle high at the end
    jmp !x do_zero side 0 [T1 - 1] ; Branch on the bit we shifted out. Drive low to start
do_one:
    jmp  bitloop   side 1 [T2 - 2] ; Drive the output high for the long high pulse
do_zero:
    nop            side 0 [T2 - T1 - 1] ; Keep driving low for the long low pulse
    nop            side 1 [T1 - 2] ; Go back to idle high. 2 because the out that follows eats 1 cycle
.wrap

% c-sdk{
#include "hardware/gpio.h"
#include "hardware/clocks.h"

static inline void gcn_tx_init(PIO pio, uint sm, uint offset, uint pin, float freq)
{
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = gcn_tx_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 32);

    int cycles_per_bit = gcn_tx_T1 + gcn_tx_T2;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}