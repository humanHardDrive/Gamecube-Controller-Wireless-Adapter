.program gcn_comm
.side_set 1 pindirs ;Pindirs means the side set changes the pin direction, not state. side 1 sets it to an output pulled low. side 0 sets it to an input high-z.

.define public T1 4     ;Time the output is kept low for a 1. Time output is kept high for a 0
.define public T2 12    ;Time the output is kept low for a 0. Time output is kept high for a 1
.define public T3 6
;What matters is that T2 is 3 times as long as T1

;State machine starts in the transmit state
.wrap_target
PUBLIC tx_start:
    out y, 32           side 0 ;Grab the number of bits to transmit first. Stuff them in the Y register

tx_loop:
    jmp y-- tx_proc     side 0 ;Decrement the loop count. If not 0, jump to the transmit machine
    jmp !OSRE tx_flush  side 0 ;Loop count is 0. Check if there is still data to be shifted from the OSR. It needs to be flushed for the next transmit to work
    jmp do_stop         side 1 ;The OSR is empty, jump to the stop bit

tx_proc:
    out x, 1            side 0 ;Shift the next bit into the X register. Keep the pin high-z
    jmp !x do_zero      side 1 [T1 - 1] ;Branch on the bit we shifted out. Drive low to start. Delay to keep the pin low the minimum amount of time (1uS for a one)

do_one:
    nop                 side 0 [T2 - 4] ;Switch back to high-z so the bit goes high. Wait here the amount of time a 1 is high. Jump back to the loop if there is more data
    jmp tx_loop         side 0 ;Keep the pin in high-z. Jump back to the transmit loop

do_zero:
    nop                 side 1 [T2 - T1 - 1] ;Keep the output low for the rest of the 0 low cycle
    nop                 side 0 [T1 - 4] ; Go back to idle high.
    jmp tx_loop         side 0 ;Keep the pin in high-z. Jump back to the transmit loop

tx_flush:
    out NULL, 32        side 1 ;Pull out whatever is left in the OSR, but don't send it anywhere

do_stop:
    nop                 side 1 [T1 - 2] ;Keep the pin low for as long as a '1' bit
    jmp rx_start        side 0 [T1 - 1] ;Jump to the RX state machine

PUBLIC rx_start:
    mov x, ~NULL        side 0          ;Set the x register to 0xFFFFFFFF. This will count the number of bits received. Including the stop bit
    mov ISR, NULL       side 0          ;Reset the ISR
    wait 0 pin 0        side 0 [6]      ;Wait for the falling edge. Delay until half way through the bit
    
bitloop:
    jmp x-- rx_data     side 0          ;Decrement the counter

rx_data:
    in pins, 1                  side 0      ;Shift the pin value into the ISR
    jmp pin idle_check_start    side 0      ;If the pin is high, this could be the start of the stop bit. Go to the idle check

    wait 1 pin 0                side 0      ;Wait for the pin to go back high

idle_check_start:
    set y, T3                   side 0      ;Set a counter to a long count to find the idle
                                            ;Long enough to handle variety of bit timings
idle_check_l1:
    jmp pin idle_check_l2       side 0      ;If the pin is still high, jump to decrement the count
    jmp bitloop                 side 0 [6]  ;Jump back to the loop, delay until half way throug the bit

idle_check_l2:
    jmp y-- idle_check_l1       side 0      ;Decrement the count. When zero, the stop bit is detected and falls through

signal:
    push                        side 0 ;Push any remaining values in the ISR to the FIFO. This may mean pushing a zero
    mov ISR, ~x                 side 0 ;Move the inverse of the counter to the ISR
    push                        side 0 ;Push the bit count onto the FIFO
    irq set 0 rel               side 0 ;Set the IRQ to signal that the read is complete
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void gcn_comm_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {

    pio_sm_config c = gcn_comm_program_get_default_config(offset);
    //Setup the pin for the state machine
    pio_gpio_init(pio, pin);
    //The pin is used as both an input and output
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_in_pins(&c, pin);
    //And is used to jump the state machine
    sm_config_set_jmp_pin(&c, pin);

    sm_config_set_in_shift(&c, false, true, 0); //shift in left (MSB first), no auto-push, 0 auto-push threshold
    sm_config_set_out_shift(&c, false, true, 0); //shift out left (MSB first), no auto-pull, 0 auto-pull threshold
    //The auto-pull threshold is modified by l_ControllerCommWrite in ControllerComm.c

    int cycles_per_bit = gcn_comm_T1 + gcn_comm_T2; //Set the clock so that there are 16 samples per bit
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint gcn_comm_switch_tx (uint offset) {
    // encode a "jmp reset_bus side 0" instruction for the state machine
    return pio_encode_jmp (offset + gcn_comm_offset_tx_start) | pio_encode_sideset (1, 0);
}

static inline uint gcn_comm_switch_rx (uint offset) {
    // encode a "jmp reset_bus side 0" instruction for the state machine
    return pio_encode_jmp (offset + gcn_comm_offset_rx_start) | pio_encode_sideset (1, 0);
}
%}